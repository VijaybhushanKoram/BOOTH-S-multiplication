`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    20:47:17 11/12/2022 
// Design Name: 
// Module Name:    Boothmul 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module Boothmul(
input ldA,clrA,shftA,ldQ,clrQ,shftQ,clrff,ldM,ldCNT,dec,
input clk,
input addsub,
input[15:0]data_in,
output eqz,qm1,
wire[15:0] A,M,Z,Q,
wire [4:0]count
    );
 assign eqz=~|count;
 
shiftreg AR(A,Z,A[15],ldA,clrA,shftA,clk);
shiftreg QR(Q,data_in,A[0],ldQ,clrQ,shftQ,clk);
dff Q1 (qm1,Q[0],clrff,clk);
pipo MR(M,data_in,clk);
ALU ZR(Z,A,M,addsub);
CNTR DC(count,dec,ldCNT,clk);

endmodule 


module shiftreg(
input s_in,clk,load,clr,shft,
input [15:0]data_in,
output reg [15:0]data_out
);
always@(posedge clk)
begin
if(clr)
data_out<=0;
else if(load)
data_out<=data_in;
else if(shft)
data_out<={s_in,data_out[15:1]};
end
endmodule

module dff(
input [15:0]data_in,
output reg [15:0]data_out,
input clk,clr
);
always@(posedge clk)
if(clr)
data_out<=0;
else 
data_out<=data_in;
endmodule 


module pipo(
input [15:0]data_in,
output reg [15:0]data_out,
input clk,
input load
);
always@(posedge clk)
if(load)
data_out<=data_in;
endmodule 


module ALU(
input addsub,
input [15:0]in1,in2,
output reg [15:0]out
);
always@*
begin
if(addsub==0) 
out<=in1-in2;
else
out<=in1+in2;
end
endmodule 

module CNTR(
input dec,clk,load,
output reg [15:0]count
);
always@(posedge clk)
begin
if(load)
count<=5'b10000;
else if(dec)
count=count-1;
end
endmodule 

